name: Deploy Vector Search Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_staging:
        description: 'Deploy to staging environment'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    name: Validate Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Security scan - Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        if find . -name "*.pem" -o -name "*.ppk" -o -path "*/AWS-Key/*"; then
          echo "❌ Sensitive files detected!"
          exit 1
        fi
        if [ -f ".env" ]; then
          echo "❌ .env file should not be committed!"
          exit 1
        fi
        echo "✅ Security scan passed"
        
    - name: Validate application structure
      run: |
        echo "Validating application structure..."
        required_files=(
          "app/main.py"
          "search_ui/search.py"
          "requirements.txt"
          ".env.example"
          "cleanup-aws.sh"
          "setup-aws.sh" 
          "setup-application-services.sh"
          "deploy.sh"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        echo "✅ Application structure validated"
        
    - name: Check data files
      run: |
        echo "Checking data files..."
        if [ -f "data/import/full/products.tar.gz" ]; then
          echo "✅ Compressed data file present: $(ls -lh data/import/full/products.tar.gz)"
        else
          echo "⚠️  No compressed data file found"
        fi
        
    - name: Validate Python imports
      run: |
        echo "Testing Python imports..."
        python -c "
        try:
            from app.main import app
            print('✅ FastAPI app imports successfully')
        except Exception as e:
            print(f'❌ FastAPI import failed: {e}')
            exit(1)
        "
        
    - name: Check script permissions
      run: |
        echo "Checking script permissions..."
        scripts=("cleanup-aws.sh" "setup-aws.sh" "setup-application-services.sh" "deploy.sh")
        for script in "${scripts[@]}"; do
          if [ -x "$script" ]; then
            echo "✅ $script is executable"
          else
            echo "❌ $script is not executable"
            exit 1
          fi
        done
        
    - name: Validate Docker configuration
      run: |
        echo "Validating Docker configuration..."
        if [ -f "Dockerfile" ]; then
          echo "✅ Dockerfile present"
        fi
        if [ -f "docker-compose.yml" ]; then
          echo "✅ docker-compose.yml present"
        fi

  test-deployment-scripts:
    name: Test Deployment Scripts
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test script syntax
      run: |
        echo "Testing shell script syntax..."
        scripts=("cleanup-aws.sh" "setup-aws.sh" "setup-application-services.sh" "deploy.sh")
        for script in "${scripts[@]}"; do
          if bash -n "$script"; then
            echo "✅ $script syntax OK"
          else
            echo "❌ $script syntax error"
            exit 1
          fi
        done
        
    - name: Test Linux compatibility
      run: |
        echo "Testing Linux compatibility..."
        if [ -f "fix-linux-compatibility.py" ]; then
          python fix-linux-compatibility.py --dry-run 2>/dev/null || true
          echo "✅ Linux compatibility script available"
        fi
        
        # Check for emoji characters in scripts
        if grep -r "🚀\|✅\|❌\|⚠️" *.sh 2>/dev/null; then
          echo "❌ Emoji characters found in scripts - may not be Linux compatible"
          exit 1
        else
          echo "✅ Scripts are Linux compatible"
        fi

  create-deployment-package:
    name: Create Deployment Package
    runs-on: ubuntu-latest
    needs: [validate, test-deployment-scripts]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment package
      run: |
        echo "Creating deployment package..."
        
        # Create deployment directory
        mkdir -p deployment-package
        
        # Copy essential files
        cp -r app/ deployment-package/
        cp -r search_ui/ deployment-package/
        cp -r scripts/ deployment-package/
        cp -r data/ deployment-package/ 2>/dev/null || echo "No data directory"
        cp requirements.txt deployment-package/
        cp .env.example deployment-package/
        cp *.sh deployment-package/
        cp Dockerfile deployment-package/ 2>/dev/null || echo "No Dockerfile"
        cp docker-compose.yml deployment-package/ 2>/dev/null || echo "No docker-compose.yml"
        cp fix-linux-compatibility.py deployment-package/ 2>/dev/null || echo "No compatibility script"
        
        # Create deployment info
        cat > deployment-package/DEPLOYMENT_INFO.txt <<EOF
        Deployment Package Information
        =============================
        
        Repository: ${{ github.repository }}
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Created: $(date -u)
        
        Quick Deploy Command:
        export GIT_REPO_URL="${{ github.server_url }}/${{ github.repository }}.git"
        ./deploy.sh
        EOF
        
        # Create archive
        tar -czf vector-search-deployment-${{ github.sha }}.tar.gz -C deployment-package .
        
        echo "✅ Deployment package created"
        ls -lh vector-search-deployment-*.tar.gz
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: vector-search-deployment-*.tar.gz
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security checks
      run: |
        echo "Running comprehensive security scan..."
        
        # Check for hardcoded secrets
        if grep -r -i "password\|secret\|key\|token" --include="*.py" --include="*.sh" . | grep -v ".example" | grep -v "# " | head -5; then
          echo "⚠️  Potential hardcoded secrets detected (review manually)"
        fi
        
        # Check for AWS credentials
        if find . -name "*.pem" -o -name "*.ppk" -o -name "aws-credentials"; then
          echo "❌ AWS credential files detected!"
          exit 1
        fi
        
        # Check .env files
        if find . -name ".env" -not -name "*.example"; then
          echo "❌ .env files detected (should be .env.example)!"
          exit 1
        fi
        
        echo "✅ Security scan completed"

  deploy-notification:
    name: Deployment Ready Notification
    runs-on: ubuntu-latest
    needs: [validate, test-deployment-scripts, create-deployment-package, security-scan]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment status
      run: |
        if [ "${{ needs.validate.result }}" == "success" ] && [ "${{ needs.test-deployment-scripts.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "🎉 Vector Search Application is ready for deployment!"
          echo ""
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "Deploy with:"
          echo "export GIT_REPO_URL=\"${{ github.server_url }}/${{ github.repository }}.git\""
          echo "./deploy.sh"
          echo ""
          echo "✅ All checks passed"
        else
          echo "❌ Deployment checks failed"
          echo "Validate: ${{ needs.validate.result }}"
          echo "Scripts: ${{ needs.test-deployment-scripts.result }}" 
          echo "Security: ${{ needs.security-scan.result }}"
        fi